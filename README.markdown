# MS Natural Keyboard HID Handler

I wanted a way to access the multimedia/special keys on my Microsoft Natural Ergonomic Keyboard 4000 without buying ControllerMate.
This uses IOKit to access the HID, no KEXT, everything is done in Userland.

## Usage

* download a pre-built archive from the [project's Github Downloads](https://github.com/Orangenhain/MS-Natural-Keyboard-HID-Handler/downloads) page
* unpack it to somewhere you feel comfortable with
* start it
* press one of your keyboards special keys, a dialog should show up to configure the associated action

You might also want to add the programm to your "Login Items".

## Programs

### Special Key Handler

Once started, it sits in the background, and waits for key down presses of the keyboard's "special keys". If it detects one, it either shows a configuration window, if no action is associated with the key, or it opens the configured file.

Redefining keys is a bit cumbersome at the moment, there are two ways:

* either have to play with the Preferences .plist 
* hit an undefined special key, so the configuration window pops up, and then you can press the key you want to redefine

### Input Event Dumper

The program shows all events generated by key presses. It exists for two purposes:

1. to test the HID handler
2. to let me figure out what IOKit "sees" when I use keyboard

## Odds and Ends

The program will open applications, folders and files (using the default application).

You can use Automator to create applications. This makes it easy to convert AppleScripts or shell scripts to applications that can be started with `Special Key Handler` (you can create an app that starts the screensaver, for example).

Don't forget the special keys in the second row. The ones on F1-F12.

## ToDo

* Icons
* easier way to redefine keys

## Credits & Contributors

* Thane Norton -- for his part in the WWDC talk on User-Level Device Access
* Giles C Williams, Alex Smith and Jens Ayton -- for their work on OOLeopardJoystickManager
